#!/bin/bash
# Source: https://gitlab.com/gitlab-org/charts/gitlab/-/issues/3387#note_1029971225

set -eu

# Setup environment
export NAMESPACE=${NAMESPACE:-default}
export RELEASE=${RELEASE:-myrelease}
export CREATE=${CREATE:-no}
export CERT_SANS=${CERT_SANS:-"*.${NAMESPACE}.svc"}
export CN=${CN:-"${RELEASE}.${NAMESPACE}.internal"}

# Setup working directory
mkdir -p certs
cd certs

# Generate default CA config
cfssl print-defaults config > ca-config.json

# Generate a CA
echo '{"CN":"'${CN}.ca'","key":{"algo":"ecdsa","size":256}}' | \
  cfssl gencert -initca - | \
  cfssljson -bare ca -

# Generate certificate
echo '{"CN":"'${CN}'","key":{"algo":"ecdsa","size":256}}' | \
  cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -profile www -hostname="${CERT_SANS}" - |\
  cfssljson -bare ${RELEASE}-services

echo "generated in ./certs/"

# Load certificates into K8s
if [ "${CREATE}" = "yes" ]; then
  kubectl -n ${NAMESPACE} create secret tls ${RELEASE}-tls --cert=${RELEASE}-services.pem --key=${RELEASE}-services-key.pem

  # As a Secret
  kubectl -n ${NAMESPACE} create secret generic ${RELEASE}-tls-ca --from-file=ca.crt=ca.pem

  # Or, as a ConfigMap
  kubectl -n ${NAMESPACE} create configmap ${RELEASE}-tls-ca --from-file=ca.pem
else
  echo 'skipping Secret creation, set CREATE=yes to enable'
fi
